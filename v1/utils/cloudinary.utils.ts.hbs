import { v2 as cloudinary } from "cloudinary";

import dotenv from "dotenv";
import logger from "./logger.utils";

dotenv.config();

cloudinary.config({
  cloud_name: process.env.CLOUDINARY_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

export const uploadImage = async ({
  image,
  publicId,
  folder,
}: {
  image: string;
  publicId?: string;
  folder: string;
}) => {
  // Set type and folder options
  let options: any = {
    resource_type: "image",
    folder: folder,
    transformation: [
      { width: 1000, crop: "scale" },
      { quality: "auto" },
      { fetch_format: "auto" },
    ],
  };

  // If publicId is provided, set the public_id and overwrite options
  if (publicId) {
    options.public_id = publicId;
    options.overwrite = true;
  }

  // Try to upload the image
  try {
    const res = await cloudinary.uploader.upload(image, options);
    logger.info(`[Success uploading image]: ${JSON.stringify(res)}`);
    return res;
  } catch (error) {
    logger.error(`[Error uploading image]: ${JSON.stringify(error)}`);
  }
};

export const deleteImage = async (publicIds: string[]) => {
  try {
    console.log(publicIds);
    publicIds.forEach(async (publicId) => {
      const res = await cloudinary.uploader.destroy(publicId);
      logger.info(`[Success deleting image]: ${JSON.stringify(res)}`);
    });
    return true;
  } catch (error) {
    logger.error(`[Error deleting image]: ${JSON.stringify(error)}`);
  }
};

import { Prisma } from "@prisma/client"; // Import Prisma errors
import { NextFunction, Request, Response } from "express";
import { ZodError } from "zod";
import ResponseError from "../error/response.error";
import logger from "../utils/logger.utils";

// Middleware for handling errors
const errorMiddleware = (
  err: Error,
  req: Request,
  res: Response,
  next: NextFunction
) => {
  logger.error(`Error occurred: ${err.message}`, { stack: err.stack });

  if (err instanceof ResponseError) {
    // Custom app-specific error
    res.status(err.statusCode).json({
      status: err.statusCode,
      message: err.message,
      data: null,
    });
  } else if (err instanceof ZodError) {
    // Zod validation error
    res.status(400).json({
      status: 400,
      message: "Validation error",
      data: err.errors, // Provide detailed Zod validation errors
    });
  } else if (err instanceof Prisma.PrismaClientKnownRequestError) {
    // Prisma known request error handling
    handlePrismaError(err, res);
  } else if (err) {
    // General server error
    res.status(500).json({
      status: 500,
      message: "Internal server error",
      data: null,
    });
  }

  next(err);
};

// Function to handle Prisma errors
const handlePrismaError = (
  err: Prisma.PrismaClientKnownRequestError,
  res: Response
) => {
  let message = "Database error occurred";

  // Prisma error code reference: https://www.prisma.io/docs/reference/api-reference/error-reference
  switch (err.code) {
    case "P2002":
      message = "Unique constraint failed, duplicate entry detected.";
      break;
    case "P2003":
      message = "Foreign key constraint failed.";
      break;
    case "P2025":
      message = "Record to update not found.";
      break;
    // Add more Prisma error cases as needed
    default:
      message = "An unknown database error occurred.";
  }

  // Return a clean response to the client
  res.status(400).json({
    status: 400,
    message,
    data: null,
  });
};

export default errorMiddleware;
